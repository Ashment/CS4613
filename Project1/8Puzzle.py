
#####################################################
#################  P R O J E C T  1  ################
#####################################################
#                       CS4613                      #
#                 Baizhou David Hou                 #
#                       bh1762                      #
#####################################################

# An Implementation of A* search algorithm for finding a solution
# 	to the 8-puzzle of 8 tiles on a board of 9 tiles. The puzzle is
# 	defined as moving from an arbitrary initial state to a goal 
# 	state. The solution is represented by the moves made in order
# 	by the EMPTY TILE (represented by U,D,L,R).

######################################################
######        The Solution must return:          #####
######################################################
# 	d: depth of solution                             #
# 	N: Number of nodes generated by the search.      #
# 	A: Moves of the empty tile to solution (U D L R) #
# 	f: The value f(n) of each node along solution    #
######################################################

import AStar

######################################################
#     __  __ _____ _____ _   _  ___  ____  ____      #
#    |  \/  | ____|_   _| | | |/ _ \|  _ \/ ___|     #
#    | |\/| |  _|   | | | |_| | | | | | | \___ \     #
#    | |  | | |___  | | |  _  | |_| | |_| |___) |    #
#    |_|  |_|_____| |_| |_| |_|\___/|____/|____/     #
#                                                    #
######################################################

# Produce entry points for search algorithm from file.
def InitFromFile(targetFile, heuType):
	initialMap = [];
	goalMap = [];

	f = open(targetFile);
	fLines = f.readlines();
	f.close();

	# Getting initial state (line 0-2) and appending to initialMap by row.
	for i in range(0,3):
		curLine = fLines[i];
		nums = curLine.split();
		initialMap.append([  int(nums[0]), int(nums[1]), int(nums[2])  ]);

	# Getting goal state (line 4-6) by row.
	for i in range(4,7):
		curLine = fLines[i];
		nums = curLine.split();
		goalMap.append([  int(nums[0]), int(nums[1]), int(nums[2])  ]);

	# Generates a root node where search can begin.
	rootNode = AStar.StateNode(initialMap, goalMap, 0, heuType, None, None);

	return rootNode, goalMap

# Puts result into desired output format.
def GenerateOutput(roNode, searchObj, searchResult):
	out = "";
	out += roNode.getOutput();
	out += "\n";
	out += searchResult.getOutput();
	out += "\n"+str(searchResult.dep)+"\n"+str(searchObj.totalNodes)+"\n";

	moves = "";
	costs = "";
	pathList = [];
	GetPath(searchResult, pathList);


	for curStep in pathList:
		moves += str(curStep[0]) + " ";
		costs += str(curStep[1].fCost) + " ";


	out += moves + "\n" + costs + "\n"
	return out;

def GetPath(tNode, pList):
	if tNode.lastAction != None and tNode.lastNode != None:
		GetPath(tNode.lastNode, pList);
		pList.append((tNode.lastAction, tNode.lastNode));
	else:
		return

	return


##################################
#     _____ _____ ____ _____     #
#    |_   _| ____/ ___|_   _|    #
#      | | |  _| \___ \ | |      #
#      | | | |___ ___) || |      #
#      |_| |_____|____/ |_|      #
#                                #
##################################

def main():

	# Usability
	fname = input("File Name -> ");
	heurT = input("Heuristic Type (A or B) -> ")

	# Initialize from file and create a search manager object.
	rootNode, goalMap = InitFromFile(fname, heurT);
	search = AStar.AStarSearch(rootNode, goalMap);
	print("Initial Heuristic:", rootNode.heu);

	# Some terminal output for verbose operation
	print("--- GOAL ---");
	print(goalMap);
	print();
	print(rootNode);

	result = search.doSearch();
	output = GenerateOutput(rootNode, search, result);
	print("\n", "********************************", "\n");
	print(output);
	print("\n", "********************************", "\n");

	#Write results to file if output name is specified.
	fname = "";
	fname = input("Output File Name (or ENTER to skip) -> ");
	if(fname != ""):
		writeout = open(fname, "w+");
		writeout.write(output);
		writeout.close();
		print("Saved.");
	else:
		print("Not saved.");

def testing():
	# Usability
	fname = input("File Name -> ");
	heurT = input("Heuristic Type (A or B) -> ")

	# Initialize from file and create a search manager object.
	rootNode, goalMap = InitFromFile(fname, heurT);
	print(rootNode);

	tList = rootNode.GenerateChildren();
	print(rootNode.GetEmptyPos());
	for e in tList:
		print(e);

#testing();
main();
#AStar.ImpPrintT();






